# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158k8lB_OiriWaCtLwEzPmGdEhIwDoSo5
"""

#Import Library
from fastapi import FastAPI
from pydantic import BaseModel, Field
from typing_extensions import Literal
import pickle
import numpy as np

#Membuat instance aplikasi FastAPI
app = FastAPI()

#Load model
with open("xgboost_model.pkl", "rb") as f:
    model = pickle.load(f)

#Input dengan validasi
class ObesityInput(BaseModel):
    Gender: Literal["Male", "Female"]
    Age: int = Field(..., ge=1, le=100)
    Height: float = Field(..., ge=1.0, le=2.5)
    Weight: float = Field(..., ge=20, le=300)
    family_history_with_overweight: Literal ["yes", "no"]
    FAVC: Literal ["yes", "no"]
    FCVC: float = Field(..., ge=1.0, le=3.0)
    NCP: float = Field(..., ge=1.0, le=10.0)
    CAEC: Literal ["no", "Sometimes", "Frequently", "Always"]
    SMOKE: Literal["yes", "no"]
    CH2O: float = Field(..., ge=1.0, le=3.0)
    SCC: Literal["yes", "no"]
    FAF: float = Field(..., ge=0.0, le=3.0)
    TUE: float = Field(..., ge=0.0, le=3.0)
    CALC: Literal ["no", "Sometimes", "Frequently", "Always"]
    MTRANS: Literal["Automobile", "Bike", "Motorbike", "Public_Transportation", "Walking"]

#Endpoint prediksi
@app.post("/predict")
def predict(data: ObesityInput):
    #Encoding
    gender = 1 if data.Gender == "Male" else 0
    family_history = 1 if data.family_history_with_overweight == "yes" else 0
    favc = 1 if data.FAVC == "yes" else 0
    caec_map = {"no": 0, "Sometimes": 1, "Frequently": 2, "Always": 3}
    caec = caec_map[data.CAEC]
    smoke = 1 if data.SMOKE == "yes" else 0
    scc = 1 if data.SCC == "yes" else 0
    calc_map = {"no": 0, "Sometimes": 1, "Frequently": 2, "Always": 3}
    calc = calc_map[data.CALC]
    mtrans_map = {
    "Automobile": [1, 0, 0, 0, 0],
    "Bike": [0, 1, 0, 0, 0],
    "Motorbike": [0, 0, 1, 0, 0],
    "Public_Transportation": [0, 0, 0, 1, 0],
    "Walking": [0, 0, 0, 0, 1]
    }
    mtrans_encoded = mtrans_map[data.MTRANS]

    input_data = np.array([[
    gender,
    data.Age,
    data.Height,
    data.Weight,
    family_history,
    favc,
    data.FCVC,
    data.NCP,
    caec,
    smoke,
    data.CH2O,
    scc,
    data.FAF,
    data.TUE,
    calc,
    *mtrans_encoded
]], dtype=float)

    #Mapping label
    label_map = {
        0: "Insufficient_Weight",
        1: "Normal_Weight",
        2: "Obesity_Type_I",
        3: "Obesity_Type_II",
        4: "Obesity_Type_III",
        5: "Overweight_Level_I",
        6: "Overweight_Level_II"
    }

    #Prediksi
    prediction = model.predict(input_data)
    label = label_map[int(prediction[0])]
    return {"prediction": label}